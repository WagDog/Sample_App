== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies
  Had to remove the scaffolds.css.scss file that is created I think when a new application is created, or Rails Generate Scaffold is run.
  To use Bootstrap in your app, you require the bootstrap-sass gem in the gem file, as well as the application.js requiring the bootstrap.js line
  after the jquery lines. Also require a custom.css.scss file containing the bootstrap variables.

* Configuration
  Hosted on Heroku after an acoount has been created.
  Heroku was setup with the app connected to GitHub, with the source code
  pushed up to GitHub after a local commits.

  The following settings were added to the config->environments->production.rb file
  NOTE - The lines below are from http://stackoverflow.com/questions/16271696/cant-get-css-working-on-heroku-using-rails-4-with-bootstrap-sass-gem
  This refers to Bootstrap not working on Heroku
  config.serve_static_files = true
  config.assets.compile = true

  The Gemfile was altered to include a group :production which includes the gem 'pg' for the Postgre database used by Heroku
  Also the gem 'sqlite3' was moved to the group :development :test section, as Heroku cannot install the gem

  The following line had to be added to the header partial so that the app is responsive on mobile devices
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  This is added to the application.html.erb file

  The config->database.yml had to be amended to change the adapter to adapter: postgresql instead of using the default sqlite3 settings.
  The file was also edited to include the database settings for host, database name, port, user and password.
  To run the app, the database had to be initialised as per the instructions in the Database Initialisation section


* Database creation
  To create a starting point for model, controller and view, use the scaffold method as follows:-
  Run the Rails Generator scaffold with capitialised model name (singular) and fields:field type e.g
  $> rails generate scaffold User user_name:string user_age:integer .......
  This will also generate a migration file to create the table in the database. The rake task db:migrate must be run as follows:-
  $> rake db:migrate
  To add or change fields at a later date, we need to create a migration file with the changes. We use the Rails Generate Migration
  function with the model name (singular) and the field:field types as space seperated parameters e.g
  $> rails generate migration User user_occupation:string
  Again, the Rake task db:migrate will have to be run to affect the changes.
  To drop a table from the database, run the following from the Rails console
  $>ActiveRecord::Migrate.drop_table(:<SomeTableName>)
  Then run db:migrate



* Database initialization
  The Heroku toolbelt for windows was installed. Then from the Ruby console, logged onto Heroku account by just typing:-
  Heroku login
  Once logged in, run the rake task db:migrate RAILS_ENV=production. i.e heroku run rake db:migrate --app <myHerokuAppName>
  Note - ReRunning the command above doesn't in this case delete any data. To start over, do as follows;-
  rake db:reset db:migrate # This will rest the database and use the current schema
  rake db:drop db:create db:migrate  # This will destroy, create and use the current schema
  In both of the above commands, all data will be destroyed.
  Have a look at the schema.rb file for creating a new database using the Rake function db:schema:load. This
  will create a new database without having to run all the migrations, which might be many.


* Database Interrogation
  The Heroku website allows the creation of DataClips under the database section of the website. This can be used to store frequently
  used SQL commands.

* How to run the test suite
  RSpec is used for the test suite with test files in the spec->features folder. To run the tests, do as follows:-
  First go to the Ruby command console. Then run just type rake. This will process all files that match pattern spec/**{,/*/**}/*_spec.rb
  To run just one test, type bundle exec rspec ./features/some_test_spec.rb


* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions
  The app is deployed using the Heroku interface using the Deploy icon once having clicked on the app name.
  This gets the code from GitHub, so it is important that GitHub is set up correctly and all files have been
  added to staging and then committed.

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.
